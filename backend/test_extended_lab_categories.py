#!/usr/bin/env python3
"""
Test script for extended lab categories: biochemical analysis, hormonal profile, 
coagulation tests, and viral hepatitis markers
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services import ocr_service

def test_biochemical_analysis():
    """Test biochemical blood analysis metrics."""
    
    print("üß™ Testing Biochemical Analysis")
    print("=" * 50)
    
    biochemical_tests = [
        "–û–±—â–∏–π –±–µ–ª–æ–∫: 75.5 –≥/–ª (–Ω–æ—Ä–º–∞: 65,0 - 85,0)",
        "–ê–ª—å–±—É–º–∏–Ω: 42.3 –≥/–ª (–Ω–æ—Ä–º–∞: 35,0 - 50,0)",
        "–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω: 89 –º–∫–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 62 - 115)",
        "–ì–ª—é–∫–æ–∑–∞: 5.8 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 3,9 - 6,1)",
        "–ú–∞–≥–Ω–∏–π: 0.95 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 0,75 - 1,25)",
        "–ê–õ–¢: 28 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 40)",
        "–ê–°–¢: 32 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 40)",
        "–ë–∏–ª–∏—Ä—É–±–∏–Ω –æ–±—â–∏–π: 18.5 –º–∫–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 8,5 - 20,5)",
        "–ë–∏–ª–∏—Ä—É–±–∏–Ω –ø—Ä—è–º–æ–π: 4.2 –º–∫–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 0 - 8,6)",
        "–ì–ì–¢: 25 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 50)",
        "–©–µ–ª–æ—á–Ω–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞: 78 U/L (–Ω–æ—Ä–º–∞: 44 - 147)",
        "–ì–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω: 5.8 % (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 6,5)",
        "–°-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫: 2.1 –º–≥/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 3,0)",
        "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π: 5.2 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 5,2)",
        "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–í–ü: 1.4 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –±–æ–ª–µ–µ 1,0)",
        "–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–ù–ü: 3.1 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 3,0)",
        "–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã: 1.8 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 1,7)",
        "–ö–∞–ª–∏–π: 4.2 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 3,5 - 5,1)",
    ]
    
    success_count = 0
    for test_case in biochemical_tests:
        try:
            metrics = ocr_service.extract_metrics_from_text(test_case)
            if len(metrics) > 0:
                metric = metrics[0]
                print(f"‚úÖ {test_case}")
                print(f"   ‚Üí {metric['name']} = {metric['value']} {metric['unit']} [{metric['status']}]")
                success_count += 1
            else:
                print(f"‚ùå Failed to parse: {test_case}")
        except Exception as e:
            print(f"‚ùå Error with: {test_case} - {e}")
    
    print(f"\nüìä Biochemical Analysis Success: {success_count}/{len(biochemical_tests)} ({success_count/len(biochemical_tests)*100:.1f}%)")
    return success_count == len(biochemical_tests)

def test_hormonal_profile():
    """Test hormonal profile metrics."""
    
    print("\nüî¨ Testing Hormonal Profile")
    print("=" * 40)
    
    hormonal_tests = [
        "–¢–¢–ì: 2.5 –º–∫–ú–ï/–º–ª (–Ω–æ—Ä–º–∞: 0,27 - 4,20)",
        "–°–≤–æ–±–æ–¥–Ω—ã–π –¢3: 4.8 –ø–≥/–º–ª (–Ω–æ—Ä–º–∞: 2,0 - 4,4)",
        "–°–≤–æ–±–æ–¥–Ω—ã–π –¢4: 16.2 –Ω–≥/–¥–ª (–Ω–æ—Ä–º–∞: 12,0 - 22,0)",
        "25-–û–ù –≤–∏—Ç–∞–º–∏–Ω D: 32 –Ω–≥/–º–ª (–Ω–æ—Ä–º–∞: –±–æ–ª–µ–µ 30)",
    ]
    
    success_count = 0
    for test_case in hormonal_tests:
        try:
            metrics = ocr_service.extract_metrics_from_text(test_case)
            if len(metrics) > 0:
                metric = metrics[0]
                print(f"‚úÖ {test_case}")
                print(f"   ‚Üí {metric['name']} = {metric['value']} {metric['unit']} [{metric['status']}]")
                success_count += 1
            else:
                print(f"‚ùå Failed to parse: {test_case}")
        except Exception as e:
            print(f"‚ùå Error with: {test_case} - {e}")
    
    print(f"\nüìä Hormonal Profile Success: {success_count}/{len(hormonal_tests)} ({success_count/len(hormonal_tests)*100:.1f}%)")
    return success_count == len(hormonal_tests)

def test_coagulation_tests():
    """Test coagulation (coagulogram) metrics."""
    
    print("\nü©∏ Testing Coagulation Tests")
    print("=" * 35)
    
    coagulation_tests = [
        "–ê–ß–¢–í: 28.5 —Å–µ–∫ (–Ω–æ—Ä–º–∞: 25,4 - 36,9)",
        "–ú–ù–û: 1.1 (–Ω–æ—Ä–º–∞: 0,85 - 1,15)",
        "–ü—Ä–æ—Ç—Ä–æ–º–±–∏–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: 13.2 —Å–µ–∫ (–Ω–æ—Ä–º–∞: 11,0 - 15,0)",
        "–¢—Ä–æ–º–±–∏–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: 16.8 —Å–µ–∫ (–Ω–æ—Ä–º–∞: 14,0 - 21,0)",
        "–ü—Ä–æ—Ç—Ä–æ–º–±–∏–Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: 95 % (–Ω–æ—Ä–º–∞: 78 - 142)",
        "–§–∏–±—Ä–∏–Ω–æ–≥–µ–Ω: 3.2 –≥/–ª (–Ω–æ—Ä–º–∞: 2,0 - 4,0)",
    ]
    
    success_count = 0
    for test_case in coagulation_tests:
        try:
            metrics = ocr_service.extract_metrics_from_text(test_case)
            if len(metrics) > 0:
                metric = metrics[0]
                print(f"‚úÖ {test_case}")
                print(f"   ‚Üí {metric['name']} = {metric['value']} {metric['unit']} [{metric['status']}]")
                success_count += 1
            else:
                print(f"‚ùå Failed to parse: {test_case}")
        except Exception as e:
            print(f"‚ùå Error with: {test_case} - {e}")
    
    print(f"\nüìä Coagulation Tests Success: {success_count}/{len(coagulation_tests)} ({success_count/len(coagulation_tests)*100:.1f}%)")
    return success_count == len(coagulation_tests)

def test_hepatitis_markers():
    """Test viral hepatitis markers with qualitative results."""
    
    print("\nüß´ Testing Hepatitis Markers")
    print("=" * 35)
    
    hepatitis_tests = [
        "–ê–Ω—Ç–∏—Ç–µ–ª–∞ –∫ –≥–µ–ø–∞—Ç–∏—Ç—É C: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
        "Anti-HCV: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ",
        "HBsAg: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", 
        "–ì–µ–ø–∞—Ç–∏—Ç B: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ",
    ]
    
    success_count = 0
    for test_case in hepatitis_tests:
        try:
            metrics = ocr_service.extract_metrics_from_text(test_case)
            if len(metrics) > 0:
                metric = metrics[0]
                result_text = "Negative" if metric['value'] == 0.0 else "Positive" if metric['value'] == 1.0 else "Normal"
                print(f"‚úÖ {test_case}")
                print(f"   ‚Üí {metric['name']} = {result_text} [{metric['status']}]")
                success_count += 1
            else:
                print(f"‚ùå Failed to parse: {test_case}")
        except Exception as e:
            print(f"‚ùå Error with: {test_case} - {e}")
    
    print(f"\nüìä Hepatitis Markers Success: {success_count}/{len(hepatitis_tests)} ({success_count/len(hepatitis_tests)*100:.1f}%)")
    return success_count == len(hepatitis_tests)

def test_alternative_spellings():
    """Test alternative spellings and abbreviations."""
    
    print("\nüìù Testing Alternative Spellings")
    print("=" * 40)
    
    alternative_tests = [
        "–ê–õ–ê–¢: 25 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 40)",     # Alternative for –ê–õ–¢
        "–ê–°–ê–¢: 30 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 40)",     # Alternative for –ê–°–¢
        "–ì–ì–¢–ü: 35 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 50)",     # Alternative for –ì–ì–¢
        "–©–§: 82 U/L (–Ω–æ—Ä–º–∞: 44 - 147)",      # Short for –©–µ–ª–æ—á–Ω–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞
        "–°–†–ë: 1.8 –º–≥/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 3,0)",   # Short for –°-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫
        "–õ–ü–í–ü: 1.3 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –±–æ–ª–µ–µ 1,0)", # Short for –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–í–ü
        "–õ–ü–ù–ü: 2.9 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 3,0)", # Short for –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –õ–ü–ù–ü
        "TSH: 2.8 –º–∫–ú–ï/–º–ª (–Ω–æ—Ä–º–∞: 0,27 - 4,20)", # English abbreviation
        "HbA1c: 5.9 % (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 6,5)",    # Glycated hemoglobin
        "INR: 1.0 (–Ω–æ—Ä–º–∞: 0,85 - 1,15)",      # International normalized ratio
    ]
    
    success_count = 0
    for test_case in alternative_tests:
        try:
            metrics = ocr_service.extract_metrics_from_text(test_case)
            if len(metrics) > 0:
                metric = metrics[0]
                print(f"‚úÖ {test_case}")
                print(f"   ‚Üí {metric['name']} = {metric['value']} {metric['unit']} [{metric['status']}]")
                success_count += 1
            else:
                print(f"‚ùå Failed to parse: {test_case}")
        except Exception as e:
            print(f"‚ùå Error with: {test_case} - {e}")
    
    print(f"\nüìä Alternative Spellings Success: {success_count}/{len(alternative_tests)} ({success_count/len(alternative_tests)*100:.1f}%)")
    return success_count == len(alternative_tests)

def test_mixed_comprehensive_report():
    """Test a comprehensive mixed medical report with all categories."""
    
    print("\nüìã Testing Comprehensive Mixed Report")
    print("=" * 45)
    
    comprehensive_report = """
–î–∞—Ç–∞: 26.04.2025
–í—Ä–µ–º—è: 16:12
–ü–∞—Ü–∏–µ–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò.–ò.

–û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ö–†–û–í–ò:
HGB: 145.0 –≥/–ª (–Ω–æ—Ä–º–∞: 130,00 - 160,00)
RBC: 4.8 10^12/–ª (–Ω–æ—Ä–º–∞: 4,50 - 5,90)
WBC: 7.2 10^9/–ª (–Ω–æ—Ä–º–∞: 4,00 - 9,00)

–ë–ò–û–•–ò–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
–ì–ª—é–∫–æ–∑–∞: 5.4 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 3,9 - 6,1)
–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω: 92 –º–∫–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: 62 - 115)
–ê–õ–¢: 32 U/L (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 40)
–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω: 5.0 –º–º–æ–ª—å/–ª (–Ω–æ—Ä–º–∞: –º–µ–Ω–µ–µ 5,2)

–ì–û–†–ú–û–ù–´:
–¢–¢–ì: 3.1 –º–∫–ú–ï/–º–ª (–Ω–æ—Ä–º–∞: 0,27 - 4,20)
–°–≤–æ–±–æ–¥–Ω—ã–π –¢4: 18.5 –Ω–≥/–¥–ª (–Ω–æ—Ä–º–∞: 12,0 - 22,0)

–ö–û–ê–ì–£–õ–û–ì–†–ê–ú–ú–ê:
–ê–ß–¢–í: 30.2 —Å–µ–∫ (–Ω–æ—Ä–º–∞: 25,4 - 36,9)
–ú–ù–û: 1.05 (–Ω–æ—Ä–º–∞: 0,85 - 1,15)

–í–ò–†–£–°–ù–´–ï –ú–ê–†–ö–ï–†–´:
Anti-HCV: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
HBsAg: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
"""
    
    print("üìÑ Processing comprehensive report...")
    
    try:
        metrics = ocr_service.extract_metrics_from_text(comprehensive_report)
        
        print(f"\nüìä Extracted {len(metrics)} metrics:")
        print("=" * 60)
        
        # Categorize metrics
        categories = {
            'Complete Blood Count': [],
            'Biochemical Analysis': [],
            'Hormonal Profile': [],
            'Coagulation Tests': [],
            'Viral Markers': []
        }
        
        for metric in metrics:
            name = metric['name']
            if any(x in name for x in ['hemoglobin', 'blood_cells', 'white_blood', 'red_blood']):
                categories['Complete Blood Count'].append(metric)
            elif any(x in name for x in ['glucose', 'creatinine', 'alt_', 'cholesterol']):
                categories['Biochemical Analysis'].append(metric)
            elif any(x in name for x in ['thyroid', 'free_t']):
                categories['Hormonal Profile'].append(metric)
            elif any(x in name for x in ['thromboplastin', 'normalized_ratio']):
                categories['Coagulation Tests'].append(metric)
            elif any(x in name for x in ['hepatitis', 'antibodies']):
                categories['Viral Markers'].append(metric)
        
        total_expected = 12  # Expected metrics from the report
        
        for category, metrics_list in categories.items():
            if metrics_list:
                print(f"\nüîπ {category} ({len(metrics_list)} metrics):")
                for metric in metrics_list:
                    if metric['unit'] == 'qualitative':
                        result = "Negative" if metric['value'] == 0.0 else "Positive" if metric['value'] == 1.0 else "Normal"
                        print(f"   ‚Ä¢ {metric['name']:30} = {result:>8} [{metric['status']}]")
                    else:
                        print(f"   ‚Ä¢ {metric['name']:30} = {metric['value']:>8.2f} {metric['unit']:10} [{metric['status']}]")
        
        success = len(metrics) >= total_expected * 0.8  # 80% success rate
        print(f"\nüéØ Comprehensive Report: {'‚úÖ PASS' if success else '‚ùå FAIL'}")
        print(f"   Extracted: {len(metrics)}/{total_expected} metrics")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Error processing comprehensive report: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Extended Lab Categories Test Suite")
    print("=" * 80)
    
    # Run all category tests
    biochemical_result = test_biochemical_analysis()
    hormonal_result = test_hormonal_profile()
    coagulation_result = test_coagulation_tests()
    hepatitis_result = test_hepatitis_markers()
    spelling_result = test_alternative_spellings()
    comprehensive_result = test_mixed_comprehensive_report()
    
    # Final summary
    print("\n" + "=" * 80)
    print("üìä EXTENDED LAB CATEGORIES TEST RESULTS:")
    print(f"  Biochemical Analysis:     {'‚úÖ PASS' if biochemical_result else '‚ùå FAIL'}")
    print(f"  Hormonal Profile:         {'‚úÖ PASS' if hormonal_result else '‚ùå FAIL'}")
    print(f"  Coagulation Tests:        {'‚úÖ PASS' if coagulation_result else '‚ùå FAIL'}")
    print(f"  Hepatitis Markers:        {'‚úÖ PASS' if hepatitis_result else '‚ùå FAIL'}")
    print(f"  Alternative Spellings:    {'‚úÖ PASS' if spelling_result else '‚ùå FAIL'}")
    print(f"  Comprehensive Report:     {'‚úÖ PASS' if comprehensive_result else '‚ùå FAIL'}")
    
    overall_success = all([biochemical_result, hormonal_result, coagulation_result, 
                          hepatitis_result, spelling_result, comprehensive_result])
    
    print(f"\nüéØ OVERALL: {'‚úÖ ALL LAB CATEGORIES WORKING' if overall_success else '‚ùå SOME ISSUES REMAIN'}")
    
    if overall_success:
        print("\nüéâ SUCCESS: Extended lab categories are working correctly!")
        print("   ‚Ä¢ Biochemical analysis metrics properly parsed")
        print("   ‚Ä¢ Hormonal profile tests recognized")  
        print("   ‚Ä¢ Coagulation tests handled correctly")
        print("   ‚Ä¢ Qualitative hepatitis markers working")
        print("   ‚Ä¢ Alternative spellings and abbreviations supported")
        print("   ‚Ä¢ Comprehensive mixed reports processed successfully")
    else:
        print("\n‚ö†Ô∏è  Some lab categories need attention - see details above")
    
    print("=" * 80) 